<#
.SYNOPSIS
    Install Direwolf software TNC for APRS and packet radio
    
.DESCRIPTION
    Downloads and installs latest Direwolf from GitHub releases with pre-configuration
    for sound card devices and APRS settings.
    
.PARAMETER ConfigFile
    Optional JSON configuration file with callsign, audio devices, and APRS settings
    
.EXAMPLE
    .\Install-Direwolf.ps1
    Basic installation without pre-configuration
    
.EXAMPLE
    .\Install-Direwolf.ps1 -ConfigFile "EmComm-Config.json"
    Install with pre-configured settings from JSON
    
.NOTES
    Requires Administrator privileges
    Logs to C:\Logs\Direwolf_Install_YYYYMMDD_HHMMSS.log
    Creates default configuration at %USERPROFILE%\direwolf.conf

.INTUNE WIN32 APP DEPLOYMENT
    Install command: powershell.exe -ExecutionPolicy Bypass -NoProfile -File "Install-Direwolf.ps1"
    Install behavior: System context
    Detection: File exists %ProgramFiles%\Direwolf\direwolf.exe
    Return codes: 0=success, 1=failure
#>

# Requires -RunAsAdministrator

param(
    [string]$ConfigFile
)

# Logging setup
$LogDir = "C:\Logs"
if (-not (Test-Path $LogDir)) {
    New-Item -Path $LogDir -ItemType Directory -Force | Out-Null
}
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = "$LogDir\Direwolf_Install_$Timestamp.log"

function Write-Log {
    param(
        [string]$Message,
        [ValidateSet('INFO','WARNING','ERROR')]
        [string]$Level = 'INFO'
    )
    $LogMessage = "{0} [{1}] {2}" -f (Get-Date -Format "yyyy-MM-dd HH:mm:ss"), $Level, $Message
    Add-Content -Path $LogFile -Value $LogMessage
    
    switch ($Level) {
        'ERROR'   { Write-Host $Message -ForegroundColor Red }
        'WARNING' { Write-Host $Message -ForegroundColor Yellow }
        default   { Write-Host $Message }
    }
}

Write-Log "Starting Direwolf installation"

# GitHub API to get latest release
$GitHubAPI = "https://api.github.com/repos/wb2osz/direwolf/releases/latest"

$TempDir = "$env:TEMP\Direwolf"
if (-not (Test-Path $TempDir)) {
    New-Item -Path $TempDir -ItemType Directory -Force | Out-Null
}

# Load configuration if provided
$Config = $null
if ($ConfigFile -and (Test-Path $ConfigFile)) {
    Write-Log "Loading configuration from $ConfigFile"
    try {
        $Config = Get-Content $ConfigFile -Raw | ConvertFrom-Json
        Write-Log "Configuration loaded successfully"
    }
    catch {
        Write-Log "Failed to load configuration: $_" -Level WARNING
    }
}

try {
    Write-Log "Fetching latest Direwolf release from GitHub"
    $Release = Invoke-RestMethod -Uri $GitHubAPI -Headers @{ "User-Agent" = "PowerShell" } -ErrorAction Stop
    $Version = $Release.tag_name
    Write-Log "Latest version: $Version"
    
    # Find Windows installer (usually .exe or .msi)
    $Asset = $Release.assets | Where-Object { $_.name -match "win.*\.(exe|msi)$" } | Select-Object -First 1
    
    if (-not $Asset) {
        Write-Log "No Windows installer found in release assets" -Level ERROR
        exit 1
    }
    
    $DownloadUrl = $Asset.browser_download_url
    $InstallerName = $Asset.name
    $InstallerPath = "$TempDir\$InstallerName"
    
    Write-Log "Downloading Direwolf from $DownloadUrl"
    Invoke-WebRequest -Uri $DownloadUrl -OutFile $InstallerPath -ErrorAction Stop
    Write-Log "Download completed: $InstallerPath"

    Write-Log "Installing Direwolf"
    if ($InstallerName -match "\.msi$") {
        $Process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$InstallerPath`" /quiet /norestart" -Wait -PassThru -ErrorAction Stop
    } else {
        $Process = Start-Process -FilePath $InstallerPath -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait -PassThru -ErrorAction Stop
    }
    
    if ($Process.ExitCode -eq 0) {
        Write-Log "Direwolf installed successfully"
    } else {
        Write-Log "Direwolf installation returned exit code: $($Process.ExitCode)" -Level WARNING
    }
}
catch {
    Write-Log "Failed to install Direwolf: $_" -Level ERROR
    exit 1
}

# Create default configuration file
Write-Log "Creating Direwolf configuration file"

$CallSign = if ($Config -and $Config.operator.callsign) { $Config.operator.callsign } else { "NOCALL" }
$AudioDevice = if ($Config -and $Config.audio.captureDevice) { $Config.audio.captureDevice } else { "0" }

$DirewolfConf = @"
# Direwolf configuration generated by Install-Direwolf.ps1
# $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

ADEVICE $AudioDevice
ACHANNELS 1

# Radio channel configuration
CHANNEL 0
MYCALL $CallSign
MODEM 1200

# PTT configuration - using VOX by default
# For CAT control, uncomment and configure:
# PTT COM1 RTS

# APRS Digipeater (disabled by default)
# DIGIPEAT 0 0 ^WIDE[3-7]-[1-7]$|^TEST$ ^WIDE[12]-[12]$ TRACE

# Internet Gateway (APRS-IS) - disabled by default
# Uncomment and configure to enable:
# IGSERVER noam.aprs2.net
# IGLOGIN $CallSign 12345

# Beaconing (disabled by default)
# PBEACON delay=1 every=30 overlay=S symbol="digi" lat=47.6062 long=-122.3321 comment="Direwolf TNC"

# Logging
LOGDIR C:\Logs\Direwolf
"@

$ConfPath = "$env:USERPROFILE\direwolf.conf"
Set-Content -Path $ConfPath -Value $DirewolfConf -Force
Write-Log "Configuration created at $ConfPath"

# Create log directory
$DirewolfLogDir = "C:\Logs\Direwolf"
if (-not (Test-Path $DirewolfLogDir)) {
    New-Item -Path $DirewolfLogDir -ItemType Directory -Force | Out-Null
    Write-Log "Created log directory: $DirewolfLogDir"
}

# Cleanup
Write-Log "Cleaning up temporary files"
Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue

Write-Log "Direwolf installation completed successfully"
Write-Log "Edit $ConfPath to customize settings"
exit 0
