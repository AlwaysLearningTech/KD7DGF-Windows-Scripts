<#
.SYNOPSIS
    Install YAAC (Yet Another APRS Client)
    
.DESCRIPTION
    Downloads and installs latest YAAC from ka2ddo.org with optional pre-configuration
    for callsign, position, and Direwolf integration.
    
.PARAMETER ConfigFile
    Optional JSON configuration file with callsign and station settings
    
.EXAMPLE
    .\Install-YAAC.ps1
    Basic installation without pre-configuration
    
.EXAMPLE
    .\Install-YAAC.ps1 -ConfigFile "EmComm-Config.json"
    Install with pre-configured callsign and position
    
.NOTES
    Requires Administrator privileges
    Requires Java Runtime Environment (JRE)
    Logs to C:\Logs\YAAC_Install_YYYYMMDD_HHMMSS.log

.INTUNE WIN32 APP DEPLOYMENT
    Install command: powershell.exe -ExecutionPolicy Bypass -NoProfile -File "Install-YAAC.ps1"
    Install behavior: System context
    Detection: File exists %ProgramFiles%\YAAC\YAAC.jar
    Return codes: 0=success, 1=failure
#>

# Requires -RunAsAdministrator

param(
    [string]$ConfigFile
)

# Logging setup
$LogDir = "C:\Logs"
if (-not (Test-Path $LogDir)) {
    New-Item -Path $LogDir -ItemType Directory -Force | Out-Null
}
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = "$LogDir\YAAC_Install_$Timestamp.log"

function Write-Log {
    param(
        [string]$Message,
        [ValidateSet('INFO','WARNING','ERROR')]
        [string]$Level = 'INFO'
    )
    $LogMessage = "{0} [{1}] {2}" -f (Get-Date -Format "yyyy-MM-dd HH:mm:ss"), $Level, $Message
    Add-Content -Path $LogFile -Value $LogMessage
    
    switch ($Level) {
        'ERROR'   { Write-Host $Message -ForegroundColor Red }
        'WARNING' { Write-Host $Message -ForegroundColor Yellow }
        default   { Write-Host $Message }
    }
}

Write-Log "Starting YAAC installation"

# YAAC download URL
$YAACUrl = "https://www.ka2ddo.org/ka2ddo/YAAC.zip"
$InstallDir = "$env:ProgramFiles\YAAC"

$TempDir = "$env:TEMP\YAAC"
if (-not (Test-Path $TempDir)) {
    New-Item -Path $TempDir -ItemType Directory -Force | Out-Null
}

# Load configuration if provided
$Config = $null
if ($ConfigFile -and (Test-Path $ConfigFile)) {
    Write-Log "Loading configuration from $ConfigFile"
    try {
        $Config = Get-Content $ConfigFile -Raw | ConvertFrom-Json
        Write-Log "Configuration loaded successfully"
    }
    catch {
        Write-Log "Failed to load configuration: $_" -Level WARNING
    }
}

# Check for Java
Write-Log "Checking for Java Runtime Environment"
try {
    $JavaVersion = & java -version 2>&1 | Select-Object -First 1
    Write-Log "Java found: $JavaVersion"
}
catch {
    Write-Log "Java not found - YAAC requires JRE" -Level WARNING
    Write-Log "Installing OpenJDK via winget"
    try {
        & winget install --id Microsoft.OpenJDK.21 --silent --accept-package-agreements --accept-source-agreements
        Write-Log "OpenJDK installed successfully"
    }
    catch {
        Write-Log "Failed to install Java - YAAC will not function without JRE" -Level ERROR
    }
}

try {
    Write-Log "Downloading YAAC from $YAACUrl"
    $ZipPath = "$TempDir\YAAC.zip"
    Invoke-WebRequest -Uri $YAACUrl -OutFile $ZipPath -ErrorAction Stop
    Write-Log "Download completed: $ZipPath"

    Write-Log "Extracting YAAC to $InstallDir"
    if (Test-Path $InstallDir) {
        Remove-Item -Path $InstallDir -Recurse -Force
    }
    Expand-Archive -Path $ZipPath -DestinationPath $InstallDir -Force
    Write-Log "Extraction completed"
    
    # Create desktop shortcut
    $WshShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WshShell.CreateShortcut("$env:Public\Desktop\YAAC.lnk")
    $Shortcut.TargetPath = "javaw.exe"
    $Shortcut.Arguments = "-jar `"$InstallDir\YAAC.jar`""
    $Shortcut.WorkingDirectory = $InstallDir
    $Shortcut.IconLocation = "$InstallDir\YAAC.ico"
    $Shortcut.Save()
    Write-Log "Desktop shortcut created"
    
}
catch {
    Write-Log "Failed to install YAAC: $_" -Level ERROR
    exit 1
}

# Pre-configure if config provided
if ($Config) {
    Write-Log "Configuring YAAC settings"
    
    $YAACConfigDir = "$env:USERPROFILE\.yaac"
    if (-not (Test-Path $YAACConfigDir)) {
        New-Item -Path $YAACConfigDir -ItemType Directory -Force | Out-Null
    }
    
    $CallSign = if ($Config.operator.callsign) { $Config.operator.callsign } else { "NOCALL" }
    $Latitude = if ($Config.operator.latitude) { $Config.operator.latitude } else { "0.0" }
    $Longitude = if ($Config.operator.longitude) { $Config.operator.longitude } else { "0.0" }
    
    # Create YAAC properties file
    $PropsContent = @"
# YAAC configuration generated by Install-YAAC.ps1
# $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

callsign=$CallSign
latitude=$Latitude
longitude=$Longitude
symbol=/[
symbolTable=\\

# Direwolf TNC configuration
port.0.type=KISS
port.0.device=localhost
port.0.port=8001
port.0.enabled=true

# APRS-IS configuration (disabled by default)
aprs-is.enabled=false
aprs-is.server=noam.aprs2.net
aprs-is.port=14580

# Beacon settings (disabled by default)
beacon.enabled=false
beacon.interval=30
"@

    $PropsPath = "$YAACConfigDir\YAAC.properties"
    Set-Content -Path $PropsPath -Value $PropsContent -Force
    Write-Log "Configuration created at $PropsPath"
}

# Cleanup
Write-Log "Cleaning up temporary files"
Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue

Write-Log "YAAC installation completed successfully"
exit 0
